// src/main.rs

use std::sync::Arc;
use clap::Parser;

// –ú–æ–¥—É–ª–∏
mod raddb;
mod models;
mod directory_service;
mod cli;
mod web;

// –ò—Å–ø–æ–ª—å–∑—É–µ–º cli –∏ web
use cli::Cli;
use web::run_web_server;
use directory_service::DirectoryService;

/// –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
#[derive(clap::Parser)]
#[command(name = "mextdomen")]
#[command(about = "–£—Ç–∏–ª–∏—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Active Directory", long_about = None)]
struct Args {
    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    #[arg(long, action)]
    web: bool,

    /// –ê–¥—Ä–µ—Å –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 127.0.0.1:8080)
    #[arg(long, default_value = "127.0.0.1:8080")]
    addr: String,

    /// –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º
    #[arg(short, long, default_value = "data")]
    data_dir: String,

    /// –ú–∞—Å—Ç–µ—Ä-–∫–ª—é—á (32 –±–∞–π—Ç–∞ –≤ hex)
    #[arg(short, long, default_value = "00000000000000000000000000000000")]
    key: String,
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let args = Args::parse();

    // –°–æ–∑–¥–∞—ë–º CLI —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    let cli = Cli {
        data_dir: args.data_dir.clone(),
        key: args.key.clone(),
        command: Cli::parse().command, // –ø–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ clap
    };

    // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ parse_key
    let key = Cli::parse_key(&args.key)?;
    let service = Arc::new(DirectoryService::open(&args.data_dir, &key)?);

    if args.web {
        println!("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-API –Ω–∞ http://{}", args.addr);
        run_web_server(service, &args.addr).await?;
    } else {
        cli.run().await?;
    }

    Ok(())
}