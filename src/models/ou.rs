// src/models/ou.rs

use serde::{Deserialize, Serialize};
use uuid::Uuid;
use crate::models::policy::PolicyId;
use chrono::Utc;
use std::collections::HashMap;

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OrganizationalUnit {
    pub id: Uuid,
    pub name: String,
    pub display_name: Option<String>,
    pub description: Option<String>,

    /// DN: –Ω–∞–ø—Ä–∏–º–µ—Ä, OU=IT,DC=corp,DC=com
    pub dn: String,

    /// –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π OU –∏–ª–∏ –¥–æ–º–µ–Ω
    pub parent: Option<Uuid>,

    /// –û–±—ä–µ–∫—Ç—ã –≤ —ç—Ç–æ–º OU
    pub users: Vec<Uuid>,
    pub groups: Vec<Uuid>,
    pub child_ous: Vec<Uuid>,

    /// –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏
    pub linked_gpos: Vec<PolicyId>,

    /// –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è?
    pub block_inheritance: bool,

    /// –ü–æ–ª–∏—Ç–∏–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—ã—à–µ —Å—Ç–æ–∏—Ç `block_inheritance`
    pub enforced: bool,

    // üîΩ –ê—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è LDAP-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    #[serde(default)]
    pub gplink: String, // –§–æ—Ä–º–∞—Ç: "[{GUID};3][{GUID2};2]"

    #[serde(default)]
    pub gpoptions: u32, // 0 = no block, 1 = block inheritance

    /// –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    pub meta: HashMap<String, String>,

    pub created_at: chrono::DateTime<Utc>,
    pub updated_at: chrono::DateTime<Utc>,
}

impl OrganizationalUnit {
    /// –û–±–Ω–æ–≤–∏—Ç—å gPLink –Ω–∞ –æ—Å–Ω–æ–≤–µ linked_gpos
    pub fn update_gplink(&mut self) {
        let mut link = String::new();
        for gpo_id in &self.linked_gpos {
            // –§–ª–∞–≥: 1 = enabled, 2 = enabled + enforced
            let flag = if self.enforced { 2 } else { 1 };
            link.push_str(&format!("[{};{}]", gpo_id, flag));
        }
        self.gplink = link;
    }

    /// –û–±–Ω–æ–≤–∏—Ç—å gpoptions –Ω–∞ –æ—Å–Ω–æ–≤–µ block_inheritance
    pub fn update_gpoptions(&mut self) {
        self.gpoptions = if self.block_inheritance { 1 } else { 0 };
    }

    /// –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π OU —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
    pub fn new(name: String, dn: String, parent: Option<Uuid>) -> Self {
        let mut ou = Self {
            id: Uuid::new_v4(),
            name,
            display_name: None,
            description: None,
            dn,
            parent,
            users: vec![],
            groups: vec![],
            child_ous: vec![],
            linked_gpos: vec![],
            block_inheritance: false,
            enforced: false,
            gplink: String::new(),
            gpoptions: 0,
            meta: HashMap::new(),
            created_at: chrono::Utc::now(),
            updated_at: chrono::Utc::now(),
        };
        ou.update_gplink();
        ou.update_gpoptions();
        ou
    }

    /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å OU –≤ LDAP-–∑–∞–ø–∏—Å—å
        #[allow(dead_code)]
    pub fn to_ldap_entry(&self) -> HashMap<String, Vec<String>> {
        let mut entry = HashMap::new();

        entry.insert("objectClass".to_string(), vec![
            "top".to_string(),
            "organizationalUnit".to_string(),
        ]);
        entry.insert("distinguishedName".to_string(), vec![self.dn.clone()]);
        entry.insert("ou".to_string(), vec![self.name.clone()]);
        entry.insert("name".to_string(), vec![self.name.clone()]);

        if let Some(display_name) = &self.display_name {
            entry.insert("displayName".to_string(), vec![display_name.clone()]);
        }
        if let Some(description) = &self.description {
            entry.insert("description".to_string(), vec![description.clone()]);
        }

        // gPLink –∏ gPOptions ‚Äî –∫–ª—é—á–µ–≤—ã–µ –¥–ª—è GPO
        entry.insert("gPLink".to_string(), vec![self.gplink.clone()]);
        entry.insert("gPOptions".to_string(), vec![self.gpoptions.to_string()]);

        // whenCreated –∏ whenChanged
        entry.insert("whenCreated".to_string(), vec![
            format_ldap_time(&self.created_at)
        ]);
        entry.insert("whenChanged".to_string(), vec![
            format_ldap_time(&self.updated_at)
        ]);

        // meta ‚Äî –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        for (k, v) in &self.meta {
            entry.insert(k.clone(), vec![v.clone()]);
        }

        entry
    }
}

/// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ LDAP Generalized Time (YYYYMMDDHHMMSS.0Z)
fn format_ldap_time(dt: &chrono::DateTime<Utc>) -> String {
    dt.format("%Y%m%d%H%M%S.0Z").to_string()
}